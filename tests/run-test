#!/bin/bash
set -o errexit -o nounset -o pipefail
function -h {
cat <<USAGE
 USAGE: run-test

  Push config and code for a test run to the target servers.

USAGE
}; function --help { -h ;}                 # A nice way to handle -h and --help

function main {
  [[ ${1:-} = --no-build ]] || build
  bundle

  send_bundles

  for num in {0..9}
  do init_host "$num" &
  done
  wait

  start_servers
  run_bandwidth_test && local code=$? || local code=$?
  stop_servers

  return "$code"
}

function globals {
  export LC_ALL=en_US.UTF-8                  # A locale that works consistently
  export LANG="$LC_ALL"
}; globals

function build {
  sbt assembly
  sbt 'project service-net-tests' assembly
}

function bundle {
  mkdir -p tests/harness
  cp target/scala-*/service-net-assembly-*.jar tests/harness
  cp tests/target/scala-*/service-net-tests-assembly-*.jar tests/harness
}

function refresh {
  for host in 0{0..9}.netx-stats.emesos.co
  do remote "$host" --sudo -- reboot &
  done
  wait
}

function start_servers {
  for num in {0..9}
  do start_testing_server "$num"
  done
}

function run_bandwidth_test {
  remote "00.netx-stats.emesos.co" --sudo -- run_testing_client "$@"
}

function stop_servers {
  for num in {0..9}
  do stop_testing_server "$num"
  done
}

function send_bundles {(
  cd tests/harness
  for num in {0..9}
  do
    ( tar -cz *.jar H"$num"-NET1.properties net.json |
      ssh 0"$num".netx-stats.emesos.co sudo tar -C /tmp -xz ) &
  done
  wait
)}

function init_host {
  local num="$1"
  local hostname=0"$1".netx-stats.emesos.co
  remote "$hostname" --sudo -- run_svcnet_over_configs "$num"
}

function run_svcnet_over_configs {(
  local num="$1"
  cd /tmp
  local config=H"$num"-NET1.properties
  local cmd=( java -Dsvcnet.config="$config" -jar service-net-assembly-*.jar )
  { printf ' :;' ; printf ' %q' "${cmd[@]}" ; echo ;} >&2
  "${cmd[@]}" &>/tmp/svcnet.log &
  local pid=$!
  local curl=( curl -s -S -X PUT http://localhost:9000/doc
                             -o /dev/null
                             -w '%{http_code} %{time_total} %{size_upload}\n'
                             --data-binary @/tmp/net.json )
  ( sleep 10 && "${curl[@]}" ) && local code=$? || local code=$?
  kill -TERM "$pid"
  return $code
)}

function start_testing_server {
  local num="$1"
  local hostname=0"$1".netx-stats.emesos.co

  remote "$hostname" --sudo -- run_testing_server "$num"
}

function stop_testing_server {
  local hostname=0"$1".netx-stats.emesos.co

  remote "$hostname" --sudo -- kill_testing_server
}

function run_testing_server {(
  local num="$1"
  local hex_num=$( printf '%x' $num)
  local addr="2001:db8:$hex_num:1:e::1"
  cd /tmp
  local cmd=( java -Dhttp.ip=$addr -jar service-net-tests-assembly-*.jar
                   --server )
  { printf ' :;' ; printf ' %q' "${cmd[@]}" ; echo ;} >&2
  "${cmd[@]}" &>/tmp/svcnet-test-server.log &
  echo "$!" > svcnet-test-server.pid
)}

function kill_testing_server {
  kill -TERM "$(cat /tmp/svcnet-test-server.pid)"
  rm -f /tmp/svcnet-test-server.pid
}

function run_testing_client {(
  local addr="${1:-2001:db8:0:1:e::}"
  [[ $addr != *:* ]] || addr="[$addr]"                  # Wrap IPv6 in brackets
  cd /tmp
  local cmd=( java -Dsvcnet.test.requests=1000
                   -jar service-net-tests-assembly-*.jar
                   --client "$addr:9797" )
  { printf ' :;' ; printf ' %q' "${cmd[@]}" ; echo ;} >&2
  "${cmd[@]}"
)}

##################################################################### Utilities

# Used like this: remote <ssh options> -- <command> <arg>*
function remote {
  local ssh=( -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no )
  local shell=( bash )
  while [[ ${1:+isset} ]]
  do
    case "$1" in
      --sudo) shell=( sudo bash ) ; shift ;;
      --)     shift ; break ;;
      *)      ssh=( "${ssh[@]}" "$1" ) ; shift ;;
    esac
  done
  serialized "$@" | ssh "${ssh[@]}" "${shell[@]}"
}

# Set up the actor on the remote end and then send it a message.
function serialized {
  declare -f
  echo set -o errexit -o nounset -o pipefail
  printf 'globals &&'
  printf ' %q' "$@" ; echo
}

function msg { out "$*" >&2 ;}
function err { local x=$? ; msg "$*" ; return $(( $x == 0 ? 1 : $x )) ;}
function out { printf '%s\n' "$*" ;}

# Handles "no-match" exit code specified by POSIX for filtering tools.
function maybe { "$@" || return $(( $? == 1 ? 0 : $? )) ;}

######################### Delegates to subcommands or runs main, as appropriate
if [[ ${1:-} ]] && declare -F | cut -d' ' -f3 | fgrep -qx -- "${1:-}"
then "$@"
else main "$@"
fi

